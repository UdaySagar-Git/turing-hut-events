// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum Role {
  ADMIN
  TEAM_LEADER
  USER
}

model User {
  id       String @id @default(cuid())
  name     String
  email    String @unique
  role     Role   @default(USER)
  password String

  cfHandle String?
  hrHandle String?

  Session Session[]

  teamName String?

  Event   Event?  @relation(fields: [eventId], references: [id])
  eventId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Event {
  id       String  @id @default(cuid())
  name     String
  slug     String  @unique
  isPublic Boolean @default(false)

  announcement String?
  editorials   Editorial[]

  contests Contest[]

  participants User[]

  problemIndices String[] @default(["A", "B", "C", "D", "E", "F", "G", "H"])

  startTime DateTime
  endTime   DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Editorial {
  id        String  @id @default(cuid())
  Event     Event?  @relation(fields: [eventSlug], references: [slug], onDelete: Cascade)
  eventSlug String?

  problemIndex String
  problemLink  String?
  problemName String?
  content      String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([eventSlug, problemIndex])
}

model Contest {
  id        String @id @default(cuid())
  contestId String @unique

  eventId String?
  Event   Event?  @relation(fields: [eventId], references: [id])

  invitationLink String?

  codeSubmissions CodeSubmission[]

  startTime DateTime
  endTime   DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CodeSubmission {
  id String @id @default(cuid())

  contestId String?
  Contest   Contest? @relation(fields: [contestId], references: [contestId])
  data      Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Session {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  sessionToken String   @unique
  expires      DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
